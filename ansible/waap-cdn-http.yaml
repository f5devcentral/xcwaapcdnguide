# Demo environment configuration 

- name: Configure CDN Demo application on F5 Distributed Cloud 
  hosts: webservers
  collections:
    - f5_xc_cloud.xc_cloud_modules
  connection: local

  environment:
      XC_API_TOKEN: "your_api_token"
      XC_TENANT: "your_tenant_name.console.ves.volterra.io"

  vars:
      xc_namespace: "cdn-demo-guide"
      prefix: ""
      domain: "your_domain.example.com"
      dns_volterra_managed: False
      buytime_online: "54.208.44.177"

  tasks:
    - name: Fetch current tenant details
      tenant_settings_info:
      register: tenant_settings

    - name: Create namespace
      namespace:
        state: present
        metadata:
          name: "{{ xc_namespace }}"
          description: "Automation demo namespace"

    - name: Health check
      health_check:
        state: present
        metadata:
          namespace: "{{ xc_namespace }}"
          name: "{{ prefix }}buytime-hc"
        spec:
          http_health_check:
            path: "/"
            expected_status_codes:
              - "200"
              - "204"
            headers:
              "User-Agent": "F5-XC-HealthCheck"
            use_http2: False
            use_origin_server_name: {}
          interval: 30
          timeout: 10
          healthy_threshold: 2
          unhealthy_threshold: 3
          jitter_percent: 10

    - name: Create origin pool
      origin_pool:
        state: present
        metadata:
          namespace: "{{ xc_namespace }}"
          name: "{{ prefix }}buytime-pool"
        spec:
          origin_servers:
            - public_ip:
                ip: "{{ buytime_online }}"
          port: 80
          loadbalancer_algorithm: "LB_OVERRIDE"
          endpoint_selection: "LOCAL_PREFERRED"
          healthcheck:
            - tenant: "{{ tenant_settings.resource.name }}"
              namespace: "{{ xc_namespace }}"
              name: "{{ prefix }}buytime-hc"
          no_tls: {}

    - name: Create app firewall
      application_firewall:
        state: present
        metadata:
          namespace: "{{ xc_namespace }}"
          name: "{{ prefix }}buytime-fw"
          description: "Application firewall for buytime app 2"
        spec:
          blocking: {}
          detection_settings:
            signature_selection_setting:
              attack_type_settings:
                disabled_attack_types:
                  - "ATTACK_TYPE_COMMAND_EXECUTION"
              high_medium_low_accuracy_signatures: {}
            enable_suppression: { }
            enable_threat_campaigns: { }
            violation_settings:
              disabled_violation_types:
                - "VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION"
            bot_protection_setting:
              good_bot_action: "BLOCK"
              malicious_bot_action: "REPORT"
              suspicious_bot_action: "BLOCK"
          bot_protection_setting:
            good_bot_action: "BLOCK"
            malicious_bot_action: "REPORT"
            suspicious_bot_action: "BLOCK"
          allow_all_response_codes: {}
          default_anonymization: {}
          blocking_page:
            response_code: "Forbidden"
            blocking_page: "string:///PGh0bWw+PGhlYWQ+PHRpdGxlPlJlcXVlc3QgUmVqZWN0ZWQ8L3RpdGxlPjwvaGVhZD48Ym9keT5UaGUgcmVxdWVzdGVkIFVSTCB3YXMgcmVqZWN0ZWQuIFBsZWFzZSBjb25zdWx0IHdpdGggeW91ciBhZG1pbmlzdHJhdG9yLjxici8+PGJyLz5Zb3VyIHN1cHBvcnQgSUQgaXM6IHt7cmVxdWVzdF9pZH19PGJyLz48YnIvPjxhIGhyZWY9ImphdmFzY3JpcHQ6aGlzdG9yeS5iYWNrKCkiPltHbyBCYWNrXTwvYT48L2JvZHk+PC9odG1sPg=="

    - name: Create HTTP Load Balancer with firewall details
      http_loadbalancer:
        state: present
        metadata:
          namespace: "{{ xc_namespace }}"
          name: "{{ prefix }}buytime-lb"
        spec:
          domains:
            - "waap.{{ domain }}"
          http:
            port: 80
            dns_volterra_managed: "{{ dns_volterra_managed }}"
          default_route_pools:
            - pool:
                tenant: "{{ tenant_settings.resource.name }}"
                namespace: "{{ xc_namespace }}"
                name: "{{ prefix }}buytime-pool"
              weight: 1
              priority: 1
              endpoint_subsets: {}
          app_firewall:
            tenant: "{{ tenant_settings.resource.name }}"
            namespace: "{{ xc_namespace }}"
            name: "{{ prefix }}buytime-fw"
          default_sensitive_data_policy: {}
          disable_api_definition: {}
          disable_api_discovery: {}
          disable_api_testing: {}
          disable_malicious_user_detection: {}
          disable_malware_protection: {}
          disable_rate_limit: {}
          disable_trust_client_ip_headers: {}
          disable_threat_mesh: {}
          advertise_on_public_default_vip: {}
          round_robin: {}
          service_policies_from_namespace: {}
          user_id_client_ip: {}
          l7_ddos_protection:
            clientside_action_none: {}
            ddos_policy_none: {}
            mitigation_block: {}
            rps_threshold: 0
          no_challenge: {}

    - name: Fetch HTTP load balancer
      http_loadbalancers_info:
        namespace: "{{ xc_namespace }}"
        name: "{{ prefix }}buytime-lb"
        full_details: True
      register: waap_lb
      retries: 10
      delay: 10
      until: >
        waap_lb.resources | length > 0 and
        waap_lb.resources[0].spec.host_name != ""
      when: dns_volterra_managed == False

    - name: Create CDN distribution
      cdn_loadbalancer:
        state: present
        metadata:
          namespace: "{{ xc_namespace }}"
          name: "{{ prefix }}buytime-cdn-distribution"
        spec:
          domains:
            - "cdn.{{ domain }}"
          http:
            dns_volterra_managed: "{{ dns_volterra_managed }}"
            port: 80
          origin_pool:
            public_name:
              dns_name: "waap.{{ domain }}"
              refresh_interval: 300
            no_tls: { }
            origin_servers:
              - public_name:
                  dns_name: "waap.{{ domain }}"
                port: 80
          default_cache_action:
            cache_ttl_override: "1d"
          # app_firewall:
          #   tenant: "{{ tenant_settings.resource.name }}"
          #   namespace: "{{ xc_namespace }}"
          #   name: "{{ prefix }}buytime-fw"
          disable_waf: {}
          default_sensitive_data_policy: {}
          disable_api_definition: {}
          disable_api_discovery: {}
          disable_client_side_defense: {}
          disable_malicious_user_detection: {}
          disable_rate_limit: {}
          disable_threat_mesh: {}
          l7_ddos_action_default: {}
          no_challenge: {}
          no_service_policies: {}
          system_default_timeouts: {}
          user_id_client_ip: {}


    - name: Fetch CDN load balancer
      cdn_loadbalancers_info:
        namespace: "{{ xc_namespace }}"
        full_details: true
        name: "{{ prefix }}buytime-cdn-distribution"
      register: cdn_lb
      retries: 10
      delay: 10
      until: >
          cdn_lb.resources | length > 0 and
          cdn_lb.resources[0].spec.service_domains[0].service_domain != ""
      when: dns_volterra_managed == False

    - name: WAAP DNS Records
      debug:
        msg:
          - "-------- WAAP CNAME RECORD --------"
          - "Record: {{ waap_lb.resources[0].spec.domains[0] }}"
          - "Value: {{ waap_lb.resources[0].spec.host_name }}"
          - "-----------------------------------"
      when: dns_volterra_managed == False

    - name: CDN DNS Records
      debug:
        msg:
          - "-------- CDN CNAME RECORD --------"
          - "Record: {{ cdn_lb.resources[0].spec.service_domains[0].domain }}"
          - "Value: {{ cdn_lb.resources[0].spec.service_domains[0].service_domain }}"
          - "----------------------------------"
      when: dns_volterra_managed == False

    - name: Endpoints
      debug:
       msg:
        - "WAAP: http://waap.{{ domain }}"
        - "CDN: http://cdn.{{ domain }}"
